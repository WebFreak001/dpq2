       |﻿/**
       |*   PostgreSQL major types oids.
       |*
       |*   Copyright: © 2014 DSoftOut
       |*   Authors: NCrashed <ncrashed@gmail.com>
       |*/
       |
       |module dpq2.oids;
       |
       |@safe:
       |
       |package OidType oid2oidType(Oid oid) pure
       |{
       |    static assert(Oid.sizeof == OidType.sizeof);
       |
     16|    return cast(OidType)(oid);
       |}
       |
       |/**
       | * Convert between array Oid and element Oid or vice versa
       | *
       | * Params:
       | *  s = "array" or "element"
       | *  type = source object type
       | */
       |OidType oidConvTo(string s)(OidType type)
       |{
    107|    foreach(ref a; appropriateArrOid)
       |    {
       |        static if(s == "array")
       |        {
     32|            if(a.value == type)
     11|                return a.array;
       |        }
       |        else
       |        static if(s == "element")
       |        {
0000000|            if(a.array == type)
0000000|                return a.value;
       |        }
       |        else
       |        static assert(false, "Wrong oidConvTo type "~s);
       |    }
       |
       |    import dpq2.value: ValueConvException, ConvExceptionType;
       |    import std.conv: to;
       |
0000000|    throw new ValueConvException(
       |            ConvExceptionType.NOT_IMPLEMENTED,
       |            "Conv to "~s~" for type "~type.to!string~" isn't defined",
       |            __FILE__, __LINE__
       |        );
       |}
       |
       |/// Checks if Oid type can be mapped to native D integer
       |bool isNativeInteger(OidType t) pure
       |{
       |    with(OidType)
     24|    switch(t)
       |    {
      1|        case Int8:
      2|        case Int2:
     23|        case Int4:
     23|            return true;
      1|        default:
      1|            break;
       |    }
       |
      1|    return false;
       |}
       |
       |/// Checks if Oid type can be mapped to native D float
       |bool isNativeFloat(OidType t) pure
       |{
       |    with(OidType)
      2|    switch(t)
       |    {
0000000|        case Float4:
      1|        case Float8:
      1|            return true;
      1|        default:
      1|            break;
       |    }
       |
      1|    return false;
       |}
       |
       |package:
       |
       |private struct AppropriateArrOid
       |{
       |    OidType value;
       |    OidType array;
       |}
       |
       |private static immutable AppropriateArrOid[] appropriateArrOid;
       |
       |shared static this()
       |{
       |    alias A = AppropriateArrOid;
       |
       |    with(OidType)
       |    {
      1|        immutable AppropriateArrOid[] a =
       |        [
       |            A(Text, TextArray),
       |            A(Bool, BoolArray),
       |            A(Int2, Int2Array),
       |            A(Int4, Int4Array),
       |            A(Int8, Int8Array),
       |            A(Float4, Float4Array),
       |            A(Float8, Float8Array),
       |            A(Date, DateArray),
       |            A(Time, TimeArray),
       |            A(TimeStampWithZone, TimeStampWithZoneArray),
       |            A(TimeStamp, TimeStampArray),
       |            A(Json, JsonArray),
       |            A(UUID, UUIDArray)
       |        ];
       |
      1|        appropriateArrOid = a;
       |    }
       |}
       |
       |import derelict.pq.pq: Oid;
       |
       |bool isSupportedArray(OidType t) pure nothrow @nogc
       |{
       |    with(OidType)
     23|    switch(t)
       |    {
0000000|        case BoolArray:
0000000|        case ByteArrayArray:
0000000|        case CharArray:
0000000|        case Int2Array:
     12|        case Int4Array:
     16|        case TextArray:
     16|        case Int8Array:
     16|        case Float4Array:
     16|        case Float8Array:
     16|        case TimeStampArray:
     16|        case TimeStampWithZoneArray:
     16|        case DateArray:
     16|        case TimeArray:
     16|        case TimeWithZoneArray:
     16|        case NumericArray:
     16|        case UUIDArray:
     16|        case JsonArray:
     16|        case JsonbArray:
     16|            return true;
      7|        default:
      7|            break;
       |    }
       |
      7|    return false;
       |}
       |
       |OidType detectOidTypeFromNative(T)()
       |{
       |    import std.typecons : Nullable;
       |
       |    static if(is(T == Nullable!R,R))
      4|        return detectOidTypeNotCareAboutNullable!(typeof(T.get));
       |    else
     58|        return detectOidTypeNotCareAboutNullable!T;
       |}
       |
       |private OidType detectOidTypeNotCareAboutNullable(T)()
       |{
       |    import std.bitmanip : BitArray;
       |    import std.datetime.date : StdDate = Date, TimeOfDay, DateTime;
       |    import std.datetime.systime : SysTime;
       |    import std.traits : Unqual, isSomeString;
       |    import std.uuid : StdUUID = UUID;
       |    static import dpq2.conv.time;
       |    import vibe.data.json : VibeJson = Json;
       |
       |    alias UT = Unqual!T;
       |
       |    with(OidType)
       |    {
      2|        static if(isSomeString!UT){ return Text; } else
      1|        static if(is(UT == ubyte[])){ return ByteArray; } else
      7|        static if(is(UT == bool)){ return Bool; } else
      1|        static if(is(UT == short)){ return Int2; } else
     42|        static if(is(UT == int)){ return Int4; } else
      1|        static if(is(UT == long)){ return Int8; } else
0000000|        static if(is(UT == float)){ return Float4; } else
      1|        static if(is(UT == double)){ return Float8; } else
      1|        static if(is(UT == StdDate)){ return Date; } else
      1|        static if(is(UT == TimeOfDay)){ return Time; } else
      1|        static if(is(UT == DateTime)){ return TimeStamp; } else
      1|        static if(is(UT == SysTime)){ return TimeStampWithZone; } else
      1|        static if(is(UT == dpq2.conv.time.TimeStamp)){ return TimeStamp; } else
      1|        static if(is(UT == dpq2.conv.time.TimeStampUTC)){ return TimeStampWithZone; } else
0000000|        static if(is(UT == VibeJson)){ return Json; } else
0000000|        static if(is(UT == StdUUID)){ return UUID; } else
      1|        static if(is(UT == BitArray)){ return VariableBitString; } else
       |
       |        static assert(false, "Unsupported D type: "~T.stringof);
       |    }
       |}
       |
       |/// Enum of Oid types defined in PG
       |public enum OidType : Oid
       |{
       |    Undefined = 0, ///
       |
       |    Bool = 16, ///
       |    ByteArray = 17, ///
       |    Char = 18, ///
       |    Name = 19, ///
       |    Int8 = 20, ///
       |    Int2 = 21, ///
       |    Int2Vector = 22, ///
       |    Int4 = 23, ///
       |    RegProc = 24, ///
       |    Text = 25, ///
       |    Oid = 26, ///
       |    Tid = 27, ///
       |    Xid = 28, ///
       |    Cid = 29, ///
       |    OidVector = 30, ///
       |
       |    AccessControlList = 1033, ///
       |    TypeCatalog = 71, ///
       |    AttributeCatalog = 75, ///
       |    ProcCatalog = 81, ///
       |    ClassCatalog = 83, ///
       |
       |    Json = 114, ///
       |    Jsonb = 3802, ///
       |    Xml = 142, ///
       |    NodeTree = 194, ///
       |    StorageManager = 210, ///
       |
       |    Point = 600, ///
       |    LineSegment = 601, ///
       |    Path = 602, ///
       |    Box = 603, ///
       |    Polygon = 604, ///
       |    Line = 628, ///
       |
       |    Float4 = 700, ///
       |    Float8 = 701, ///
       |    AbsTime = 702, ///
       |    RelTime = 703, ///
       |    Interval = 704, ///
       |    Unknown = 705, ///
       |
       |    Circle = 718, ///
       |    Money = 790, ///
       |    MacAddress = 829, ///
       |    HostAddress = 869, ///
       |    NetworkAddress = 650, ///
       |
       |    FixedString = 1042, ///
       |    VariableString = 1043, ///
       |
       |    Date = 1082, ///
       |    Time = 1083, ///
       |    TimeStamp = 1114, ///
       |    TimeStampWithZone = 1184, ///
       |    TimeInterval = 1186, ///
       |    TimeWithZone = 1266, ///
       |
       |    FixedBitString = 1560, ///
       |    VariableBitString = 1562, ///
       |
       |    Numeric = 1700, ///
       |    RefCursor = 1790, ///
       |    RegProcWithArgs = 2202, ///
       |    RegOperator = 2203, ///
       |    RegOperatorWithArgs = 2204, ///
       |    RegClass = 2205, ///
       |    RegType = 2206, ///
       |
       |    UUID = 2950, ///
       |    TSVector = 3614, ///
       |    GTSVector = 3642, ///
       |    TSQuery = 3615, ///
       |    RegConfig = 3734, ///
       |    RegDictionary = 3769, ///
       |    TXidSnapshot = 2970, ///
       |
       |    Int4Range = 3904, ///
       |    NumRange = 3906, ///
       |    TimeStampRange = 3908, ///
       |    TimeStampWithZoneRange = 3910, ///
       |    DateRange = 3912, ///
       |    Int8Range = 3926, ///
       |
       |    // Arrays
       |    XmlArray = 143, ///
       |    JsonbArray = 3807, ///
       |    JsonArray = 199, ///
       |    BoolArray = 1000, ///
       |    ByteArrayArray = 1001, ///
       |    CharArray = 1002, ///
       |    NameArray = 1003, ///
       |    Int2Array = 1005, ///
       |    Int2VectorArray = 1006, ///
       |    Int4Array = 1007, ///
       |    RegProcArray = 1008, ///
       |    TextArray = 1009, ///
       |    OidArray  = 1028, ///
       |    TidArray = 1010, ///
       |    XidArray = 1011, ///
       |    CidArray = 1012, ///
       |    OidVectorArray = 1013, ///
       |    FixedStringArray = 1014, ///
       |    VariableStringArray = 1015, ///
       |    Int8Array = 1016, ///
       |    PointArray = 1017, ///
       |    LineSegmentArray = 1018, ///
       |    PathArray = 1019, ///
       |    BoxArray = 1020, ///
       |    Float4Array = 1021, ///
       |    Float8Array = 1022, ///
       |    AbsTimeArray = 1023, ///
       |    RelTimeArray = 1024, ///
       |    IntervalArray = 1025, ///
       |    PolygonArray = 1027, ///
       |    AccessControlListArray = 1034, ///
       |    MacAddressArray = 1040, ///
       |    HostAdressArray = 1041, ///
       |    NetworkAdressArray = 651, ///
       |    CStringArray = 1263, ///
       |    TimeStampArray = 1115, ///
       |    DateArray = 1182, ///
       |    TimeArray = 1183, ///
       |    TimeStampWithZoneArray = 1185, ///
       |    TimeIntervalArray = 1187, ///
       |    NumericArray = 1231, ///
       |    TimeWithZoneArray = 1270, ///
       |    FixedBitStringArray = 1561, ///
       |    VariableBitStringArray = 1563, ///
       |    RefCursorArray = 2201, ///
       |    RegProcWithArgsArray = 2207, ///
       |    RegOperatorArray = 2208, ///
       |    RegOperatorWithArgsArray = 2209, ///
       |    RegClassArray = 2210, ///
       |    RegTypeArray = 2211, ///
       |    UUIDArray = 2951, ///
       |    TSVectorArray = 3643, ///
       |    GTSVectorArray = 3644, ///
       |    TSQueryArray = 3645, ///
       |    RegConfigArray = 3735, ///
       |    RegDictionaryArray = 3770, ///
       |    TXidSnapshotArray = 2949, ///
       |    Int4RangeArray = 3905, ///
       |    NumRangeArray = 3907, ///
       |    TimeStampRangeArray = 3909, ///
       |    TimeStampWithZoneRangeArray = 3911, ///
       |    DateRangeArray = 3913, ///
       |    Int8RangeArray = 3927, ///
       |
       |    // Pseudo types
       |    Record = 2249, ///
       |    RecordArray = 2287, ///
       |    CString = 2275, ///
       |    AnyVoid = 2276, ///
       |    AnyArray = 2277, ///
       |    Void = 2278, ///
       |    Trigger = 2279, ///
       |    EventTrigger = 3838, ///
       |    LanguageHandler = 2280, ///
       |    Internal = 2281, ///
       |    Opaque = 2282, ///
       |    AnyElement = 2283, ///
       |    AnyNoArray = 2776, ///
       |    AnyEnum = 3500, ///
       |    FDWHandler = 3115, ///
       |    AnyRange = 3831, ///
       |}
src/dpq2/oids.d is 83% covered
