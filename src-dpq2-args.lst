       |/// Dealing with query arguments
       |module dpq2.args;
       |
       |@safe:
       |
       |public import dpq2.conv.from_d_types;
       |public import dpq2.conv.from_bson;
       |
       |import dpq2.value;
       |import dpq2.oids: Oid;
       |import std.conv: to;
       |import std.string: toStringz;
       |
       |/// Query parameters
       |struct QueryParams
       |{
       |    string sqlCommand; /// SQL command
       |    ValueFormat resultFormat = ValueFormat.BINARY; /// Result value format
       |    private Value[] _args; // SQL command arguments
       |
       |    /// SQL command arguments
       |    @property void args(Value[] vargs)
       |    {
    127|        _args = vargs;
       |    }
       |
       |    /// ditto
       |    @property ref inout (Value[]) args() inout pure
       |    {
   1345|        return _args;
       |    }
       |
       |    /// Fills out arguments from array
       |    ///
       |    /// Useful for simple text-only query params
       |    /// Postgres infers a data type for the parameter in the same way it would do for an untyped literal string.
       |    @property void argsFromArray(in string[] arr)
       |    {
      1|        _args.length = arr.length;
       |
     11|        foreach(i, ref a; _args)
      2|            a = toValue(arr[i], ValueFormat.TEXT);
       |    }
       |
       |    /// Fills out arguments from variadic arguments
       |    void argsVariadic(Targs ...)(Targs t_args)
       |    {
      1|        _args.length = t_args.length;
       |
      6|        static foreach(i, T; Targs)
       |        {
      3|            _args[i] = toValue!T(t_args[i]);
       |        }
       |    }
       |
       |    /// Access to prepared statement name
       |    ///
       |    /// Use it to prepare queries
       |    // FIXME: it is need to check in debug mode what sqlCommand is used in "SQL command" or "prepared statement" mode
0000000|    @property string preparedStatementName() const { return sqlCommand; }
       |    /// ditto
      3|    @property void preparedStatementName(string s){ sqlCommand = s; }
       |}
       |
       |unittest
       |{
      1|    QueryParams qp;
      1|    qp.argsVariadic(123, "asd", true);
       |
      4|    assert(qp.args[0] == 123.toValue);
      4|    assert(qp.args[1] == "asd".toValue);
      4|    assert(qp.args[2] == true.toValue);
       |}
       |
       |/// Used as parameters by PQexecParams-like functions
       |package struct InternalQueryParams
       |{
       |    private
       |    {
       |        const(string)* sqlCommand;
       |        Oid[] oids;
       |        int[] formats;
       |        int[] lengths;
       |        const(ubyte)*[] values;
       |    }
       |
       |    ValueFormat resultFormat;
       |
    157|    this(in QueryParams* qp) pure
       |    {
    157|        sqlCommand = &qp.sqlCommand;
    157|        resultFormat = qp.resultFormat;
       |
    157|        oids = new Oid[qp.args.length];
    157|        formats = new int[qp.args.length];
    157|        lengths = new int[qp.args.length];
    157|        values = new const(ubyte)* [qp.args.length];
       |
    474|        for(int i = 0; i < qp.args.length; ++i)
       |        {
     80|            oids[i] = qp.args[i].oidType;
     80|            formats[i] = qp.args[i].format;
       |
     80|            if(!qp.args[i].isNull)
       |            {
     76|                lengths[i] = qp.args[i].data.length.to!int;
       |
     76|                immutable ubyte[] zeroLengthArg = [123]; // fake value, isn't used as argument
       |
     76|                if(qp.args[i].data.length == 0)
      1|                    values[i] = &zeroLengthArg[0];
       |                else
     75|                    values[i] = &qp.args[i].data[0];
       |            }
       |        }
       |    }
       |
       |    /// Values used by PQexecParams-like functions
       |    const(char)* command() pure const
       |    {
    157|        return cast(const(char)*) (*sqlCommand).toStringz;
       |    }
       |
       |    /// ditto
       |    const(char)* stmtName() pure const
       |    {
     12|        return command();
       |    }
       |
       |    /// ditto
       |    int nParams() pure const
       |    {
    157|        return values.length.to!int;
       |    }
       |
       |    /// ditto
       |    const(Oid)* paramTypes() pure
       |    {
    145|        if(oids.length == 0)
     82|            return null;
       |        else
     63|            return &oids[0];
       |    }
       |
       |    /// ditto
       |    const(ubyte*)* paramValues() pure
       |    {
    157|        if(values.length == 0)
     82|            return null;
       |        else
     75|            return &values[0];
       |    }
       |
       |    /// ditto
       |    const(int)* paramLengths() pure
       |    {
    157|        if(lengths.length == 0)
     82|            return null;
       |        else
     75|            return &lengths[0];
       |    }
       |
       |    /// ditto
       |    const(int)* paramFormats() pure
       |    {
    157|        if(formats.length == 0)
     82|            return null;
       |        else
     75|            return &formats[0];
       |    }
       |}
src/dpq2/args.d is 97% covered
