       |///
       |module stdx.allocator.gc_allocator;
       |import stdx.allocator.common;
       |
       |/**
       |D's built-in garbage-collected allocator.
       | */
       |struct GCAllocator
       |{
       |    import core.memory : GC;
       |    import stdx.allocator.internal : Ternary;
       |    @system unittest { testAllocator!(() => GCAllocator.instance); }
       |
       |    /**
       |    The alignment is a static constant equal to $(D platformAlignment), which
       |    ensures proper alignment for any D data type.
       |    */
       |    enum uint alignment = platformAlignment;
       |
       |    /**
       |    Standard allocator methods per the semantics defined above. The $(D
       |    deallocate) and $(D reallocate) methods are $(D @system) because they may
       |    move memory around, leaving dangling pointers in user code.
       |    */
       |    pure nothrow @trusted void[] allocate(size_t bytes) shared
       |    {
      3|        if (!bytes) return null;
      3|        auto p = GC.malloc(bytes);
      6|        return p ? p[0 .. bytes] : null;
       |    }
       |
       |    /// Ditto
       |    @system bool expand(ref void[] b, size_t delta) shared
       |    {
0000000|        if (delta == 0) return true;
0000000|        if (b is null) return false;
0000000|        immutable curLength = GC.sizeOf(b.ptr);
0000000|        assert(curLength != 0); // we have a valid GC pointer here
0000000|        immutable desired = b.length + delta;
0000000|        if (desired > curLength) // check to see if the current block can't hold the data
       |        {
0000000|            immutable sizeRequest = desired - curLength;
0000000|            immutable newSize = GC.extend(b.ptr, sizeRequest, sizeRequest);
0000000|            if (newSize == 0)
       |            {
       |                // expansion unsuccessful
0000000|                return false;
       |            }
0000000|            assert(newSize >= desired);
       |        }
0000000|        b = b.ptr[0 .. desired];
0000000|        return true;
       |    }
       |
       |    /// Ditto
       |    pure nothrow @system bool reallocate(ref void[] b, size_t newSize) shared
       |    {
       |        import core.exception : OutOfMemoryError;
       |        try
       |        {
      3|            auto p = cast(ubyte*) GC.realloc(b.ptr, newSize);
      3|            b = p[0 .. newSize];
       |        }
       |        catch (OutOfMemoryError)
       |        {
       |            // leave the block in place, tell caller
0000000|            return false;
       |        }
      3|        return true;
       |    }
       |
       |    /// Ditto
       |    pure nothrow
       |    Ternary resolveInternalPointer(const void* p, ref void[] result) shared
       |    {
0000000|        auto r = GC.addrOf(cast(void*) p);
0000000|        if (!r) return Ternary.no;
0000000|        result = r[0 .. GC.sizeOf(r)];
0000000|        return Ternary.yes;
       |    }
       |
       |    /// Ditto
       |    pure nothrow @system bool deallocate(void[] b) shared
       |    {
0000000|        GC.free(b.ptr);
0000000|        return true;
       |    }
       |
       |    /// Ditto
       |    size_t goodAllocSize(size_t n) shared
       |    {
0000000|        if (n == 0)
0000000|            return 0;
0000000|        if (n <= 16)
0000000|            return 16;
       |
       |        import core.bitop : bsr;
       |
0000000|        auto largestBit = bsr(n-1) + 1;
0000000|        if (largestBit <= 12) // 4096 or less
0000000|            return size_t(1) << largestBit;
       |
       |        // larger, we use a multiple of 4096.
0000000|        return ((n + 4095) / 4096) * 4096;
       |    }
       |
       |    /**
       |    Returns the global instance of this allocator type. The garbage collected
       |    allocator is thread-safe, therefore all of its methods and `instance` itself
       |    are $(D shared).
       |    */
       |
       |    static shared GCAllocator instance;
       |
       |    // Leave it undocummented for now.
       |    nothrow @trusted void collect() shared
       |    {
0000000|        GC.collect();
       |    }
       |}
       |
       |///
       |@system unittest
       |{
       |    auto buffer = GCAllocator.instance.allocate(1024 * 1024 * 4);
       |    // deallocate upon scope's end (alternatively: leave it to collection)
       |    scope(exit) GCAllocator.instance.deallocate(buffer);
       |    //...
       |}
       |
       |@system unittest
       |{
       |    auto b = GCAllocator.instance.allocate(10_000);
       |    assert(GCAllocator.instance.expand(b, 1));
       |}
       |
       |@system unittest
       |{
       |    import core.memory : GC;
       |    import stdx.allocator.internal : Ternary;
       |
       |    // test allocation sizes
       |    assert(GCAllocator.instance.goodAllocSize(1) == 16);
       |    for (size_t s = 16; s <= 8192; s *= 2)
       |    {
       |        assert(GCAllocator.instance.goodAllocSize(s) == s);
       |        assert(GCAllocator.instance.goodAllocSize(s - (s / 2) + 1) == s);
       |
       |        auto buffer = GCAllocator.instance.allocate(s);
       |        scope(exit) GCAllocator.instance.deallocate(buffer);
       |
       |        void[] p;
       |        assert(GCAllocator.instance.resolveInternalPointer(null, p) == Ternary.no);
       |        Ternary r = GCAllocator.instance.resolveInternalPointer(buffer.ptr, p);
       |        assert(p.ptr is buffer.ptr && p.length >= buffer.length);
       |
       |        assert(GC.sizeOf(buffer.ptr) == s);
       |
       |        auto buffer2 = GCAllocator.instance.allocate(s - (s / 2) + 1);
       |        scope(exit) GCAllocator.instance.deallocate(buffer2);
       |
       |        assert(GC.sizeOf(buffer2.ptr) == s);
       |    }
       |
       |    // anything above a page is simply rounded up to next page
       |    assert(GCAllocator.instance.goodAllocSize(4096 * 4 + 1) == 4096 * 5);
       |}
../../../.dub/packages/stdx-allocator-2.77.1/stdx-allocator/source/stdx/allocator/gc_allocator.d is 17% covered
